# ==========================
# ‚öôÔ∏è Etapa 1: Build (Gradle)
# ==========================
FROM gradle:8.5-jdk17 AS builder

WORKDIR /app

# ‚è±Ô∏è Cache de depend√™ncias do Gradle
# (Aproveita cache quando s√≥ c√≥digo muda)
COPY build.gradle build.gradle
COPY settings.gradle settings.gradle
# Se usar Kotlin DSL, troque as linhas acima por build.gradle.kts/settings.gradle.kts
# COPY build.gradle.kts build.gradle.kts
# COPY settings.gradle.kts settings.gradle.kts

# Copia apenas arquivos de configura√ß√£o do Gradle (se existirem)
COPY gradle gradle
COPY gradlew gradlew
COPY gradle.properties gradle.properties

# Resolve depend√™ncias (sem c√≥digo do app ainda)
RUN gradle --no-daemon dependencies || true

# Agora copia o restante do projeto
COPY . .

# Gera o JAR (pula testes no build de imagem)
RUN gradle --no-daemon clean bootJar -x test


# ==========================================
# üê≥ Etapa 2: Runtime leve com FFmpeg + JRE
# ==========================================
FROM eclipse-temurin:17-jre-alpine

# GC e limites de mem√≥ria seguros em cont√™iner
ENV JAVA_TOOL_OPTIONS="-XX:+UseG1GC -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0"
# Fuso hor√°rio (opcional)
ENV TZ=America/Sao_Paulo

# Instala FFmpeg (necess√°rio pro HLS) e tzdata
RUN apk add --no-cache ffmpeg tzdata ca-certificates && update-ca-certificates

WORKDIR /app

# Copia o jar gerado
COPY --from=builder /app/build/libs/*.jar app.jar

# Seguran√ßa: roda como usu√°rio n√£o-root
RUN addgroup -S app && adduser -S app -G app
USER app

# Porta padr√£o (Render normalmente usa $PORT; seu app j√° l√™ SERVER_PORT)
ENV SERVER_PORT=8086
EXPOSE ${SERVER_PORT}

# Healthcheck simples (opcional; ajuste rota se tiver /actuator/health)
# HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=3 \
#   CMD wget -qO- "http://127.0.0.1:${SERVER_PORT}/health" || exit 1

# Inicia a aplica√ß√£o
ENTRYPOINT ["java","-jar","/app/app.jar"]
